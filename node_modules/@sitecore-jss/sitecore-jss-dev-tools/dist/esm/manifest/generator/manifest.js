var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { runPipeline } from '../../pipelines';
import { validatePlaceholder, validateTemplate } from './validators';
export const createManifestInstance = ({ pipelines, appName = '', excludeItems = false, excludeDictionary = false, language = '', debug = false, wipe = false, rootPlaceholders, skipPlaceholderBlacklist, }) => {
    const manifestSourceData = {
        appName,
        components: new Array(),
        templates: new Array(),
        placeholders: new Array(),
        routes: new Array(),
        content: new Array(),
        dictionary: new Array(),
        language,
        wipe,
        rootPlaceholders,
        skipPlaceholderBlacklist,
    };
    const addComponent = (...components) => {
        manifestSourceData.components.push(...components);
    };
    const addRoute = (...routes) => {
        manifestSourceData.routes.push(...routes);
    };
    const addContent = (...contents) => {
        manifestSourceData.content.push(...contents);
    };
    const addTemplateInternal = (...templates) => {
        templates.forEach((template) => {
            const validationResult = validateTemplate(template);
            if (validationResult.valid) {
                manifestSourceData.templates.push(template);
            }
            else {
                throw validationResult.error;
            }
        });
    };
    const addTemplate = (...templates) => {
        templates.forEach((template) => {
            const internalTemplate = template;
            internalTemplate.route = false;
            internalTemplate.defaultRoute = false;
            addTemplateInternal(internalTemplate);
        });
    };
    const addPlaceholder = (...placeholders) => {
        placeholders.forEach((placeholder) => {
            if (validatePlaceholder(placeholder).valid) {
                manifestSourceData.placeholders.push(placeholder);
            }
        });
    };
    const addRouteType = (...routeTypes) => {
        routeTypes.forEach((template) => {
            const internalTemplate = template;
            internalTemplate.route = true;
            internalTemplate.defaultRoute = false;
            addTemplateInternal(internalTemplate);
        });
    };
    const setDefaultRouteType = (defaultRouteType) => {
        const internalTemplate = defaultRouteType;
        internalTemplate.route = false;
        internalTemplate.defaultRoute = true;
        addTemplateInternal(internalTemplate);
    };
    const addDictionary = (...entries) => {
        manifestSourceData.dictionary = manifestSourceData.dictionary.concat(...entries);
    };
    const getManifest = () => __awaiter(void 0, void 0, void 0, function* () {
        const pipelineArgs = {
            debug,
            skipPlaceholderBlacklist: manifestSourceData.skipPlaceholderBlacklist,
            components: manifestSourceData.components,
            routes: manifestSourceData.routes,
            content: manifestSourceData.content,
            dictionary: manifestSourceData.dictionary,
            templates: manifestSourceData.templates,
            placeholders: manifestSourceData.placeholders,
            appName: manifestSourceData.appName,
            language: manifestSourceData.language,
            pipelines,
            pipelineResult: {
                templates: new Array(),
                items: {
                    routes: new Array(),
                    nonRoutes: new Array(),
                },
                placeholders: new Array(),
                dictionary: new Array(),
                media: new Array(),
                appName: manifestSourceData.appName,
                language: manifestSourceData.language,
                renderings: new Array(),
                wipeExisting: manifestSourceData.wipe,
                rootPlaceholders: manifestSourceData.rootPlaceholders,
            },
        };
        const pipeline = Object.assign({}, pipelines.generateManifest);
        pipeline.args = Object.assign(Object.assign({}, pipeline.args), pipelineArgs);
        const result = yield runPipeline(pipeline);
        const _a = result.pipelineResult, { items, dictionary } = _a, output = __rest(_a, ["items", "dictionary"]);
        // exclude items and media here as opposed to preventing them from being generated in
        // the manifest because some processors/pipelines may rely on generated manifest data
        if (!excludeItems) {
            output.items = items;
        }
        if (!excludeDictionary) {
            output.dictionary = dictionary;
        }
        return output;
    });
    return {
        getManifest,
        addComponent,
        addTemplate,
        addPlaceholder,
        addRouteType,
        setDefaultRouteType,
        addRoute,
        addContent,
        addDictionary,
        language,
    };
};
