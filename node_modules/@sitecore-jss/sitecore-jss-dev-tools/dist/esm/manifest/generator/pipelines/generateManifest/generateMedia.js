var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { runPipeline } from './../../../../index';
const generateMedia = ({ items, templates, pipelines }) => __awaiter(void 0, void 0, void 0, function* () {
    const pipeline = Object.assign({}, pipelines.generateMedia);
    pipeline.args = Object.assign(Object.assign({}, pipeline.args), { routes: items.routes, content: items.nonRoutes, templates,
        pipelines });
    const pipelineResult = yield runPipeline(pipeline);
    return pipelineResult.media;
});
export default (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { items, templates } = args.pipelineResult;
    const media = yield generateMedia({ items, templates, pipelines: args.pipelines });
    return Object.assign(Object.assign({}, args), { pipelineResult: Object.assign(Object.assign({}, args.pipelineResult), { media: [...args.pipelineResult.media, ...media] }) });
});
