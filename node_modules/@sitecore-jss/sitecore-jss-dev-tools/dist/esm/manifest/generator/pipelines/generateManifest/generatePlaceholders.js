var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { runPipeline } from './../../../../index';
const generatePlaceholders = ({ items, renderings, placeholders, pipelines, rootPlaceholders, skipPlaceholderBlacklist, }) => __awaiter(void 0, void 0, void 0, function* () {
    const pipeline = Object.assign({}, pipelines.generatePlaceholders);
    const pipelineArgs = Object.assign(Object.assign({}, pipeline.args), { items: items.routes, renderings,
        placeholders, placeholderNames: [], rootPlaceholders,
        pipelines,
        skipPlaceholderBlacklist });
    pipeline.args = pipelineArgs;
    const pipelineResult = yield runPipeline(pipeline);
    return pipelineResult.placeholders;
});
export default (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { items, renderings } = args.pipelineResult;
    const placeholders = yield generatePlaceholders(Object.assign({ items,
        renderings, rootPlaceholders: args.pipelineResult.rootPlaceholders }, args));
    return Object.assign(Object.assign({}, args), { pipelineResult: Object.assign(Object.assign({}, args.pipelineResult), { placeholders }) });
});
