var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CommonFieldTypes, } from '../../manifest.types';
import { checkUnique, findTemplateForComponent } from '../../utils';
const getExposedPlaceholders = (component) => {
    if (!Array.isArray(component.placeholders)) {
        return [];
    }
    return component.placeholders.map((placeholder) => {
        if (typeof placeholder === 'string') {
            return placeholder;
        }
        return placeholder.name;
    });
};
const generateRenderings = ({ components, templates }) => components.map((component) => {
    const { renderingId } = component, rendering = __rest(component, ["renderingId"]);
    if (renderingId) {
        rendering.id = renderingId;
    }
    delete rendering.templateId;
    delete rendering.templateName;
    delete rendering.fields;
    delete rendering.placeholders;
    delete rendering.inherits;
    delete rendering.insertOptions;
    rendering.exposedPlaceholders = getExposedPlaceholders(component);
    const template = findTemplateForComponent(component, templates);
    rendering.dataSourceTemplate = (template === null || template === void 0 ? void 0 : template.name) || '';
    // params can be an array of strings or of RenderingParameterDefinition-s
    // we normalize that into an object format for the manifest for easier ingestion
    if (rendering.params) {
        if (!Array.isArray(rendering.params)) {
            throw `The params property on the component definition for ${rendering.name} is invalid (not an array)`;
        }
        rendering.params = rendering.params.map((param) => {
            if (typeof param === 'string') {
                return { name: param, type: CommonFieldTypes.SingleLineText };
            }
            return param;
        });
    }
    return rendering;
});
export default (args) => {
    const { components } = args;
    const renderings = generateRenderings({ components, templates: args.pipelineResult.templates });
    const finalRenderings = [...args.pipelineResult.renderings, ...renderings];
    const duplicateIds = checkUnique(finalRenderings, (rendering) => rendering.id);
    if (duplicateIds.length > 0) {
        throw `The manifest defined duplicate rendering IDs: ${duplicateIds.join(',')}. This is not allowed.`;
    }
    const duplicateNames = checkUnique(finalRenderings, (rendering) => rendering.name);
    if (duplicateNames.length > 0) {
        throw `The manifest defined duplicate rendering names: ${duplicateNames.join(',')}. This is not allowed.`;
    }
    return Object.assign(Object.assign({}, args), { pipelineResult: Object.assign(Object.assign({}, args.pipelineResult), { renderings: finalRenderings }) });
};
