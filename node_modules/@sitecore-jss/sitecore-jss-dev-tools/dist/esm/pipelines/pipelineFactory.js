var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { run as pipelineRun, runWithCompilers as pipelineRunWithCompilers } from './pipeline';
export const processorFactory = {
    create: (name = '') => ({
        name,
        modulePath: '',
        args: {},
    }),
};
export const pipelineFactory = {
    /**
     * Create a pipeline
     * @param {string} [name]
     * @returns {Pipeline} pipeline
     */
    create: (name = '') => {
        const processors = [];
        const args = {}; // inconsistent API, this will be directly mutable, but processors not? Que pasa con eso?
        const addProcessor = (processor) => {
            const found = processors.findIndex((proc) => proc.name === processor.name);
            if (found === -1) {
                processors.push(Object.assign({}, processor)); // weak attempt at immutability
            }
            else {
                console.warn(`processor "${processor.name}" already exists. you may experience unexpected results when trying to reference the processor by name.`);
            }
        };
        const updateProcessor = (processor, processorName = '') => {
            const procName = processorName || processor.name;
            if (!procName) {
                throw new Error('no processor name specified for call to "updateProcessor", you must specify either' +
                    ' processor.name or pass in a name via the "processorName" argument.');
            }
            const found = processors.findIndex((proc) => proc.name === procName);
            if (found !== -1) {
                processors[found] = Object.assign({}, processor);
            }
            else {
                throw new Error(`processor "${procName}" not found, can't be updated`);
            }
        };
        const getProcessor = (processorName) => {
            const processor = processors.find((proc) => proc.name === processorName);
            return processor ? Object.assign({}, processor) : null; // weak attempt at immutability
        };
        const getProcessors = (predicate) => {
            if (predicate) {
                return predicate([...processors]); // weak attempt at immutability
            }
            return [...processors]; // weak attempt at immutability
        };
        const run = () => __awaiter(void 0, void 0, void 0, function* () {
            const pipeline = { name, processors: getProcessors, args };
            return pipelineRun(pipeline);
        });
        const runWithCompilers = (compilers) => __awaiter(void 0, void 0, void 0, function* () {
            const pipeline = { name, processors: getProcessors };
            return pipelineRunWithCompilers(compilers)(pipeline);
        });
        return {
            name,
            args,
            addProcessor,
            updateProcessor,
            getProcessor,
            getProcessors,
            processors: getProcessors,
            run,
            runWithCompilers,
        };
    },
};
