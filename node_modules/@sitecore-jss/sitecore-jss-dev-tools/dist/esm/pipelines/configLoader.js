var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createPipelinesRegistry } from './pipelinesRegistry';
import { importModules } from './utils';
// './**/pipeline.config.js'
const config = ({ fileGlobs = [], workingDirectory = '', existingConfig = {}, allowEmptyGlobs = false, createPipelinesRegistryImplementation, importModulesImplementation, }) => __awaiter(void 0, void 0, void 0, function* () {
    if (!fileGlobs || fileGlobs.length === 0) {
        throw new Error('no pipeline config file search patterns specified');
    }
    const pipelinesRegistry = createPipelinesRegistryImplementation
        ? createPipelinesRegistryImplementation(existingConfig)
        : createPipelinesRegistry(existingConfig);
    const moduleWrappers = importModulesImplementation
        ? importModulesImplementation({ fileGlobs, workingDirectory, allowEmptyGlobs })
        : importModules({ fileGlobs, workingDirectory, allowEmptyGlobs });
    // eslint-disable-next-line no-restricted-syntax
    for (const moduleWrapper of moduleWrappers) {
        // eslint-disable-next-line no-await-in-loop
        const pipeline = yield moduleWrapper.import();
        if (pipeline && pipeline.config) {
            pipeline.config(pipelinesRegistry);
        }
        else {
            throw new Error(`pipeline config module doesn't export a "config" method: ${moduleWrapper.file}`);
        }
    }
    return pipelinesRegistry.getPipelines();
});
export const configLoader = config;
