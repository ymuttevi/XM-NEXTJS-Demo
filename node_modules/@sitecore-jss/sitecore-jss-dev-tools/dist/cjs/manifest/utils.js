"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importModules = exports.resolveFiles = void 0;
const fs_extra_1 = require("fs-extra");
const glob = __importStar(require("glob"));
const import_fresh_1 = __importDefault(require("import-fresh"));
const nodePath = __importStar(require("path"));
// inspired by 'lookupFiles' method: https://github.com/mochajs/mocha/blob/master/lib/utils.js
const resolveFiles = ({ fileGlob, extensions, recursive, workingDirectory, }) => {
    let files = [];
    let lookupPath = fileGlob;
    const re = new RegExp(`\\.(${extensions.join('|')})$`);
    if (!fs_extra_1.existsSync(lookupPath)) {
        if (fs_extra_1.existsSync(`${lookupPath}.js`)) {
            lookupPath += '.js';
        }
        else {
            const options = {};
            if (workingDirectory) {
                options.cwd = workingDirectory;
            }
            files = glob.sync(lookupPath, options);
            return files;
        }
    }
    try {
        const stat = fs_extra_1.statSync(lookupPath);
        if (stat.isFile()) {
            return [nodePath.resolve(lookupPath)];
        }
    }
    catch (err) {
        // ignore error
        return [];
    }
    fs_extra_1.readdirSync(lookupPath).forEach((file) => {
        const filePath = nodePath.join(lookupPath, file);
        let stat;
        try {
            stat = fs_extra_1.statSync(filePath);
            if (stat.isDirectory()) {
                if (recursive) {
                    files = files.concat(exports.resolveFiles({ fileGlob: filePath, extensions, recursive, workingDirectory }));
                }
                return;
            }
        }
        catch (err) {
            // ignore error
            return;
        }
        if (!stat.isFile() || !re.test(filePath) || nodePath.basename(filePath)[0] === '.') {
            return;
        }
        const resolvedPath = nodePath.resolve(filePath);
        files.push(resolvedPath);
    });
    return files;
};
exports.resolveFiles = resolveFiles;
const importModules = ({ fileGlobs = [], workingDirectory = '', }) => {
    let resolved = [];
    fileGlobs.forEach((fileGlob) => {
        resolved = resolved.concat(exports.resolveFiles({ fileGlob, extensions: ['.js'], recursive: true, workingDirectory }));
    });
    if (!resolved.length) {
        console.warn(`No files matched any of the source patterns: '${fileGlobs.join(', ')}'`);
        return [];
    }
    // wrap import() in a function so we can control when the promise starts to resolve.
    // otherwise, promises start to resolve immediately upon creation.
    const modules = resolved.map((file) => () => import_fresh_1.default(nodePath.resolve(workingDirectory, file)));
    return modules;
};
exports.importModules = importModules;
