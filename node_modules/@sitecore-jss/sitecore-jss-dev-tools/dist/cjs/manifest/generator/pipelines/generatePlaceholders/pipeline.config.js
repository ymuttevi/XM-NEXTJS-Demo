"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const index_1 = require("./../../../../index");
const path = __importStar(require("path"));
// __dirname returns the directory of this file/module, so it has to be called here
const resolveModulePath = (modulePath) => path.resolve(__dirname, modulePath);
const config = (pipelines) => {
    const pipeline = index_1.pipelineFactory.create('generatePlaceholders');
    pipeline.addProcessor({
        name: 'extractPlaceholdersFromItems',
        modulePath: resolveModulePath('./extractPlaceholdersFromItems.js'),
    });
    pipeline.addProcessor({
        name: 'extractPlaceholdersFromRenderings',
        modulePath: resolveModulePath('./extractPlaceholdersFromRenderings.js'),
    });
    pipeline.addProcessor({
        name: 'removeDuplicates',
        modulePath: resolveModulePath('./removeDuplicates.js'),
    });
    pipeline.addProcessor({
        name: 'mergePlaceholders',
        modulePath: resolveModulePath('./mergePlaceholders.js'),
    });
    pipeline.addProcessor({
        name: 'checkBlacklistedKeys',
        modulePath: resolveModulePath('./checkBlacklistedKeys.js'),
    });
    pipelines.addPipeline(pipeline);
};
exports.config = config;
