"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./../../../../index");
exports.default = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { content, pipelines } = args;
    const actualContent = content;
    if (actualContent.children && actualContent.children.length > 0) {
        const pipeline = Object.assign({}, pipelines.generateContentItem);
        const pipelineArgs = Object.assign(Object.assign({}, pipeline.args), args);
        const promises = actualContent.children.map((nestedContent) => __awaiter(void 0, void 0, void 0, function* () {
            pipelineArgs.content = nestedContent;
            pipeline.args = pipelineArgs;
            return index_1.runPipeline(pipeline);
        }));
        const results = yield Promise.all(promises);
        return Object.assign(Object.assign({}, args), { item: Object.assign(Object.assign({}, args.item), { children: results.map((result) => result.item) }) });
    }
    return args;
});
