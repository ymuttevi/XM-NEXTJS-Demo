"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePlaceholder = exports.validateTemplate = void 0;
const joi = __importStar(require("joi"));
const fieldSchema = joi.object().keys({
    name: joi.string().required(),
    displayName: joi.string(),
    type: joi.string().required(), // todo: add specific types
});
const templateSchema = joi.object().keys({
    name: joi.string().required(),
    displayName: joi.string(),
    fields: joi.array().items(fieldSchema),
});
const placeholderSchema = joi.object().keys({
    name: joi.string().required(),
    displayName: joi.string(),
});
const validate = (object, schema, allowUnknown) => {
    const { error } = schema.validate(object, { allowUnknown });
    if (!error) {
        return { valid: true };
    }
    console.error(error);
    return { valid: false, error };
};
const validateTemplate = (template) => validate(template, templateSchema, true);
exports.validateTemplate = validateTemplate;
const validatePlaceholder = (placeholder) => validate(placeholder, placeholderSchema, true);
exports.validatePlaceholder = validatePlaceholder;
