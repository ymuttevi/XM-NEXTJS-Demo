"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPipelinesRegistry = void 0;
const createPipelinesRegistry = (existingPipelines = {}) => {
    const pipelines = Object.assign({}, existingPipelines);
    const addPipeline = (pipeline) => {
        const found = pipelines[pipeline.name];
        if (!found) {
            pipelines[pipeline.name] = Object.assign({}, pipeline); // weak attempt at immutability
        }
        else {
            console.warn(`pipeline "${pipeline.name}" already exists. you may experience unexpected results when trying to reference the pipeline by name.`);
        }
    };
    const updatePipeline = (pipeline, pipelineName = '') => {
        const pipeName = pipelineName || pipeline.name;
        if (!pipeName) {
            throw new Error('no pipeline name specified for call to "updatePipeline", ' +
                'you must specify either pipeline.name or pass in a name via the "pipelineName" argument.');
        }
        const found = pipelines[pipeName];
        if (found) {
            pipelines[pipeName] = Object.assign({}, pipeline); // weak attempt at immutability
        }
        else {
            throw new Error(`pipeline "${pipeName}" not found, can't be updated`);
        }
    };
    const deletePipeline = (pipelineName) => {
        if (pipelines[pipelineName]) {
            delete pipelines[pipelineName];
        }
    };
    const getPipeline = (pipelineName) => (Object.assign({}, pipelines[pipelineName])); // weak attempt at immutability
    const getPipelines = () => (Object.assign({}, pipelines)); // weak attempt at immutability
    return {
        addPipeline,
        updatePipeline,
        deletePipeline,
        getPipeline,
        getPipelines,
    };
};
exports.createPipelinesRegistry = createPipelinesRegistry;
