"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultDisconnectedServer = void 0;
const index_1 = require("../manifest/index");
const express_1 = __importDefault(require("express"));
const path_1 = require("path");
const dictionary_service_1 = require("./dictionary-service");
const layout_service_1 = require("./layout-service");
/**
 * @param {DisconnectedServerOptions} options
 */
function createDefaultDisconnectedServer(options) {
    let app = options.server;
    if (!app) {
        app = express_1.default();
    }
    // backwards compatibility with fix for #80
    // for GA the appRoot was expected to be $app/scripts
    // which didn't make sense. This allows both sane app roots
    // and GA-style app roots to keep working.
    if (options.appRoot.endsWith('scripts')) {
        options.appRoot = path_1.join(options.appRoot, '..');
    }
    // further backwards compatibility for #80
    // allows apps with GA watch path of '../data' (relative to /scripts)
    // to keep working even with appRoot now relative to the actual app root
    // We do this by stripping '../' from path leads, making the path './data' instead - theoretically, the chance of
    // wanting to actually escape from the app root entirely otherwise is awfully low.
    options.watchPaths = options.watchPaths.map((path) => path.startsWith('../') ? path.substring(1) : path);
    // the manifest manager maintains the state of the disconnected manifest data during the course of the dev run
    // it provides file watching services, and language switching capabilities
    const manifestManager = new index_1.ManifestManager({
        appName: options.appName,
        rootPath: options.appRoot,
        watchOnlySourceFiles: options.watchPaths,
        requireArg: options.requireArg,
        sourceFiles: options.sourceFiles,
    });
    return manifestManager
        .getManifest(options.language)
        .then((manifest) => {
        // creates a fake version of the Sitecore Layout Service that is powered by your disconnected manifest file
        const layoutService = layout_service_1.createDisconnectedLayoutService({
            manifest,
            manifestLanguageChangeCallback: manifestManager.getManifest,
            customizeContext: options.customizeContext,
            customizeRoute: options.customizeRoute,
            customizeRendering: options.customizeRendering,
        });
        // creates a fake version of the Sitecore Dictionary Service that is powered by your disconnected manifest file
        const dictionaryService = dictionary_service_1.createDisconnectedDictionaryService({
            manifest,
            manifestLanguageChangeCallback: manifestManager.getManifest,
        });
        // set up live reloading of the manifest when any manifest source file is changed
        manifestManager.setManifestUpdatedCallback((newManifest) => {
            layoutService.updateManifest(newManifest);
            dictionaryService.updateManifest(newManifest);
            if (options.onManifestUpdated) {
                options.onManifestUpdated(newManifest);
            }
        });
        // attach our disconnected service mocking middleware to webpack dev server
        app.use('/assets', express_1.default.static(path_1.join(options.appRoot, 'assets')));
        app.use('/data/media', express_1.default.static(path_1.join(options.appRoot, 'data/media')));
        app.use('/sitecore/api/layout/render', layoutService.middleware);
        app.use('/sitecore/api/jss/dictionary/:appName/:language', dictionaryService.middleware);
        if (options.afterMiddlewareRegistered) {
            options.afterMiddlewareRegistered(app);
        }
        if (options.port) {
            app.listen(options.port, () => {
                if (options.onListening) {
                    options.onListening();
                }
                else {
                    console.log(`JSS Disconnected-mode Proxy is listening on port ${options.port}. (PID: ${process.pid})`);
                }
            });
        }
    })
        .catch((error) => {
        if (options.onError) {
            options.onError(error);
        }
        else {
            console.error(error);
            process.exit(1);
        }
    });
}
exports.createDefaultDisconnectedServer = createDefaultDisconnectedServer;
