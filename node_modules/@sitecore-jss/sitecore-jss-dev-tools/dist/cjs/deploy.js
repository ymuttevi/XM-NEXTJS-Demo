"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const chalk_1 = __importDefault(require("chalk"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const del_1 = __importDefault(require("del"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
/**
 * @param {DeployOptions} options
 */
function deploy(options) {
    let createdDestination = false;
    if (!fs_extra_1.default.existsSync(options.destinationPath)) {
        console.log(`Creating nonexistant destination path ${chalk_1.default.green(options.destinationPath)}...`);
        createdDestination = true;
        fs_extra_1.default.ensureDirSync(options.destinationPath);
    }
    const copyOptions = {};
    if (options.excludeFile) {
        if (typeof options.excludeFile === 'string') {
            copyOptions.filter = (src) => {
                const result = path_1.default.basename(src).indexOf(options.excludeFile) === -1;
                if (!result) {
                    console.log(`Ignored ${chalk_1.default.yellow(src)} (${path_1.default.basename(src)}) due to exclusion.`, options.excludeFile);
                }
                return result;
            };
        }
        if (options.excludeFile && options.excludeFile instanceof Array) {
            copyOptions.filter = (src) => {
                const fileName = path_1.default.basename(src);
                const result = options.excludeFile.indexOf(fileName) === -1;
                if (!result) {
                    console.log(`Ignored ${chalk_1.default.yellow(src)} (${path_1.default.basename(src)}) due to exclusion.`, options.excludeFile);
                }
                return result;
            };
        }
    }
    if (options.clean && !createdDestination) {
        console.log(`Cleaning existing files from ${chalk_1.default.green(options.destinationPath)}...`);
        // delete the destination path's items but leave the directory alone
        del_1.default.sync([`${options.destinationPath}/**`, `!${options.destinationPath}`], { force: true });
    }
    console.log(`Copying ${chalk_1.default.green(options.sourcePath)} to ${chalk_1.default.green(options.destinationPath)}...`);
    fs_extra_1.default.copySync(options.sourcePath, options.destinationPath, copyOptions);
    console.log();
    console.log(chalk_1.default.green('JSS app build artifacts have been deployed to Sitecore.'));
}
exports.deploy = deploy;
