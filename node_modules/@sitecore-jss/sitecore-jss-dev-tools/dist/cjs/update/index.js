"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPackage = void 0;
const fs_1 = __importDefault(require("fs"));
const jszip_1 = __importDefault(require("jszip"));
const path_1 = __importDefault(require("path"));
const walkSync = (dir, filelist = []) => {
    let result = filelist;
    fs_1.default.readdirSync(dir).forEach((file) => {
        if (fs_1.default.statSync(path_1.default.join(dir, file)).isDirectory()) {
            result = result.concat(path_1.default.join(dir, file, path_1.default.sep));
            result = walkSync(path_1.default.join(dir, file), result);
        }
        else {
            result = result.concat(path_1.default.join(dir, file));
        }
    });
    return result;
};
const getEntries = (folder) => {
    const files = walkSync(folder);
    const entries = [];
    files.forEach((entry) => {
        const entryPath = path_1.default.join('.', entry);
        // remove initial folder and convert to fwd slash
        let name = path_1.default.relative(folder, entryPath);
        if (entryPath.endsWith(path_1.default.sep)) {
            name += path_1.default.sep; // ensure we retain trailing slash for dirs
        }
        name = name.split(path_1.default.sep).join('/');
        entries.push({ path: entryPath, name });
    });
    return entries;
};
const createPackage = (contentsPath, outputPath, callback) => {
    const zip = new jszip_1.default();
    const contents = getEntries(contentsPath);
    contents.forEach((entry) => {
        if (entry.name.endsWith('/')) {
            return;
        }
        console.log(`Adding ${entry.name}`);
        zip.file(entry.name, fs_1.default.readFileSync(path_1.default.normalize(entry.path)), { createFolders: false });
    });
    zip
        .generateNodeStream({ type: 'nodebuffer' })
        .pipe(fs_1.default.createWriteStream(outputPath))
        .on('error', (error) => {
        console.error(error);
    })
        .on('finish', () => {
        console.log(`Wrote ${outputPath}`);
        if (callback) {
            callback();
        }
    });
};
exports.createPackage = createPackage;
