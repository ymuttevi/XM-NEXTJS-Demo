export interface Processor {
    /**
     * name of the processor
     */
    name: string;
    /**
     * optional but must be specified if process is not
     */
    modulePath?: {
        workingDirectory: string;
        filePath: string;
    } | string;
    /**
     * optional but must be specified if modulePath is not
     */
    process?: (args: any) => any;
    /**
     * additional arguments that should be passed to the processor when invoked
     */
    args?: any;
    moduleWrapper?: any;
}
export declare const processorFactory: {
    create: (name?: string) => Processor;
};
export interface ExecutablePipeline {
    /**
     * name of the pipeline
     */
    name: string;
    /**
     * Base args object for the pipeline.
     */
    args: any;
    /**
     * the processors for the pipeline
     */
    processors: () => Processor[];
}
export interface Pipeline extends ExecutablePipeline {
    /**
     * name of the pipeline
     */
    name: string;
    /**
     * Base args object for the pipeline.
     */
    args: any;
    /**
     * the processors for the pipeline
     */
    processors: () => Processor[];
    /**
     * adds a processor to the pipeline
     */
    addProcessor: (processor: Processor) => void;
    /**
     * runs the pipeline with the given pipeline args
     */
    run: () => Promise<any>;
    /**
     * runs the pipeline with the given pipeline args, importing the given compilers first
     */
    runWithCompilers: (compilers: string[]) => Promise<any>;
}
export declare const pipelineFactory: {
    /**
     * Create a pipeline
     * @param {string} [name]
     * @returns {Pipeline} pipeline
     */
    create: (name?: string) => Pipeline;
};
