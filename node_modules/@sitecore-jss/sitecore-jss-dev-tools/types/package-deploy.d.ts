/// <reference types="node" />
import https from 'https';
import { ClientRequest, IncomingMessage } from 'http';
export interface PackageDeployOptions {
    packagePath: string;
    appName: string;
    importServiceUrl: string;
    secret: string;
    debugSecurity?: boolean;
    acceptCertificate?: string;
    proxy?: string;
}
/**
 * @param {ClientRequest} req
 * @param {PackageDeployOptions} options
 */
export declare function applyCertPinning(req: ClientRequest, options: PackageDeployOptions): void;
/**
 * @param {string} fp
 */
export declare function normalizeFingerprint(fp: string): string;
/**
 * @param {string} fp1
 * @param {string} fp2
 */
export declare function doFingerprintsMatch(fp1: string, fp2: string): boolean;
/**
 * @param {Object} params
 * @param {string[]} params.warnings
 * @param {string[]} params.errors
 * @param {Function} params.resolve
 * @param {Function} params.reject
 */
export declare function finishWatchJobStatusTask({ warnings, errors, resolve, reject, }: {
    warnings: string[];
    errors: string[];
    resolve: (value?: unknown) => void;
    reject: () => void;
}): void;
/**
 * @param {Object} params
 * @param {string} params.message
 * @param {string} params.entryLevel
 * @param {string[]} params.warnings
 * @param {string[]} params.errors
 */
export declare function logJobStatus({ message, entryLevel, warnings, errors, }: {
    message: string;
    entryLevel: string;
    warnings: string[];
    errors: string[];
}): void;
/**
 * @param {PackageDeployOptions} options
 */
export declare function packageDeploy(options: PackageDeployOptions): Promise<unknown>;
/**
 * Creates valid proxy object which fit to axios configuration
 * @param {string} [proxy] proxy url
 */
export declare function extractProxy(proxy?: string): {
    protocol: string;
    host: string;
    port: number;
} | undefined;
/**
 * Provides way to customize axios request adapter
 * in order to execute certificate pinning before request sent:
 * {@link https://github.com/axios/axios/issues/2808}
 * @param {PackageDeployOptions} options
 */
export declare function getHttpsTransport(options: PackageDeployOptions): {
    request: (reqOptions: https.RequestOptions, callback: (res: IncomingMessage) => void) => ClientRequest;
    createServer(requestListener?: import("http").RequestListener | undefined): https.Server;
    createServer(options: https.ServerOptions, requestListener?: import("http").RequestListener | undefined): https.Server;
    get(options: string | import("url").URL | https.RequestOptions, callback?: ((res: IncomingMessage) => void) | undefined): ClientRequest;
    get(url: string | import("url").URL, options: https.RequestOptions, callback?: ((res: IncomingMessage) => void) | undefined): ClientRequest;
    Agent: typeof https.Agent;
    Server: typeof https.Server;
    globalAgent: https.Agent;
};
