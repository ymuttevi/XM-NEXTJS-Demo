import { ManifestInstance } from '../manifest/index';
import { CustomizeContextFunction, CustomizeRenderFunction, CustomizeRouteFunction } from './DisconnectedLayoutServiceOptions';
export interface DisconnectedServerOptions {
    appName: string;
    /**
     * Root physical path to the app (i.e. where your package.json is)
     */
    appRoot: string;
    /**
     * File path(s) to watch for changes, and reload the manifest when they occur.
     * Paths can be relative (to the app root) or absolute.
     */
    watchPaths: string[];
    /**
     * The language to create the server in initially.
     */
    language: string;
    /**
     * Module to require before starting the disconnected server (i.e. a transpiler, or a config script that loads one)
     */
    requireArg?: string | null;
    /**
     * Express-like server instance to attach to. Defaults to a new Express instance if not passed.
     * Extra middleware, etc can be attached before passing the option.
     */
    server?: any;
    /**
     * Specify the port the server should run on. If unspecified, the server will not start listening.
     */
    port?: number;
    /**
     * The source file specifications for the manifest generation.
     */
    sourceFiles?: string[];
    /**
     * Hook function that is called after the disconnected server middleware is registered with the server,
     * but before the server starts listening. Useful to add your own middleware after the disconnected middleware.
     */
    afterMiddlewareRegistered?: (server: any) => void;
    /**
     * Hook function invoked when the server starts listening on a port
     */
    onListening?: () => void;
    /**
     * Hook function invoked when an error occurs in the server.
     */
    onError?: (error: Error) => void;
    /**
     * Hook function invoked when the manifest updates, either due to file changes or language changes.
     * Useful to respond when the data is updated in custom middleware, etc.
     */
    onManifestUpdated?: (manifest: ManifestInstance) => void;
    /**
     * Hook function to allow customizing the disconnected Sitecore Context mock.
     * Useful for faking a customized server-side context in disconnected mode.
     */
    customizeContext?: CustomizeContextFunction;
    /**
     * Hook function to allow customizing route data.
     * The 'route' param is the default route data result.
     */
    customizeRoute?: CustomizeRouteFunction;
    /**
     * Hook function to allow customizing rendering (component) data.
     * The first parameter is the default rendering data; return an object to
     * use as the final rendering data. Return falsy to use the default object.
     */
    customizeRendering?: CustomizeRenderFunction;
}
/**
 * @param {DisconnectedServerOptions} options
 */
export declare function createDefaultDisconnectedServer(options: DisconnectedServerOptions): Promise<void>;
