import { GeneratePipelineArgs } from '../../manifest.types';
declare const _default: (args: GeneratePipelineArgs) => Promise<{
    pipelineResult: {
        media: any[];
        appName: string;
        templates: import("../../manifest.types").TemplateDefinition[];
        items: {
            routes: import("../../manifest.types").RouteDefinition[];
            nonRoutes: import("../../manifest.types").ItemDefinition[];
        };
        placeholders: import("../../manifest.types").PlaceholderDefinition[];
        dictionary: import("../../manifest.types").DictionaryDefinition[];
        language: string;
        wipeExisting: boolean;
        rootPlaceholders: string[];
    };
    debug: boolean;
    skipPlaceholderBlacklist: boolean;
    components: import("../../manifest.types").ComponentDefinition[];
    routes: import("../../manifest.types").RouteDefinition[];
    content: import("../../manifest.types").ItemDefinition[];
    dictionary: import("../../manifest.types").DictionaryDefinition[];
    templates: import("../../manifest.types").TemplateDefinition[];
    placeholders: import("../../manifest.types").PlaceholderDefinition[];
    appName: string;
    language: string;
    pipelines: {
        [key: string]: import("./../../../../index").ExecutablePipeline;
    };
}>;
export default _default;
