import { ManifestInstance } from './manifest.types';
export interface GenerateOptions {
    requireArg: string;
    fileGlobs: string[];
    pipelines?: any;
    appName: string;
    excludeItems?: boolean;
    excludeMedia?: boolean;
    excludeDictionary?: boolean;
    outputPath?: string;
    language: string;
    pipelinePatchFileGlobs: string[];
    debug: boolean;
    wipe: boolean;
    rootPlaceholders: string[];
    skipPlaceholderBlacklist: boolean;
}
export interface GenerateToFileOptions extends GenerateOptions {
    outputPath?: string;
    excludeMedia?: boolean;
}
/**
 * generates the JSON manifest and returns it as a variable
 * NOTE: media is not copied into the manifest when using this method,
 * and no files are written to disk. Use generateToFile() to make a manifest
 * that is designed to get packaged/imported.
 *
 * @param {GenerateOptions} config
 */
export declare function generateToVariable({ requireArg, fileGlobs, pipelines, appName, excludeItems, excludeDictionary, language, pipelinePatchFileGlobs, debug, wipe, rootPlaceholders, skipPlaceholderBlacklist, }: GenerateOptions): Promise<ManifestInstance>;
/**
 * generates a JSON manifest and writes its contents to a directory. Media referenced in the manifest
 * is also copied to the directory.
 *
 * @param {GenerateToFileOptions} config
 */
export declare function generateToFile({ outputPath, excludeMedia, ...generateToVariableOptions }: GenerateToFileOptions): Promise<ManifestInstance>;
