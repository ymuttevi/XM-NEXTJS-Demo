"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
    throw err;
});
/**
 * @param {any} commands
 */
function cli(commands) {
    return __awaiter(this, void 0, void 0, function* () {
        let appCommands = yargs_1.default.usage('$0 <command>');
        // this prevents yargs from showing help with 'jss.js' as the base command
        // when the command is just 'jss' as a global bin
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        appCommands.$0 = 'jss';
        for (const cmd of Object.keys(commands)) {
            const commandObject = commands[cmd];
            // command is a yargs builder function that takes a yargs and returns a yargs
            // YARRRRRGS :D
            if (typeof commandObject.builder === 'function') {
                appCommands = yield commandObject.builder(appCommands);
            }
            // command is a yargs 'command module' (https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module)
            if (typeof commandObject.builder === 'object') {
                const ogBuilder = commandObject.builder;
                // apply strict-ness to the args of each command
                const builderFunc = commandObject.disableStrictArgs
                    ? (yarrrrg) => yarrrrg.options(ogBuilder)
                    : (yarrrrg) => yarrrrg.options(ogBuilder).strict();
                commandObject.builder = builderFunc;
                appCommands = appCommands.command(commandObject);
            }
        }
        const argv = yield appCommands.demandCommand(1).help().argv;
        if (!argv._[0]) {
            console.log('Missing command. Use --help to see all available options.');
        }
    });
}
exports.default = cli;
