"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.args = void 0;
const chalk_1 = __importDefault(require("chalk"));
const micro_manifest_1 = __importDefault(require("../micro-manifest"));
const deploy_template_1 = require("./deploy.template");
/**
 * @param {Argv} yargs
 */
function builder(yargs) {
    return yargs.command('component <name>', 'Deploys a new component (or updates an existing component) to the Sitecore server when using Sitecore-first development. `jss deploy component --help` for options.', args, handler);
}
exports.default = builder;
/**
 * @param {Argv} yargs
 */
function args(yargs) {
    return deploy_template_1.args(yargs)
        .option('allowedPlaceholders', {
        requiresArg: false,
        type: 'array',
        describe: 'The placeholder name(s) to allow the rendering to be placed in. For example --allowedPlaceholders Foo or --allowedPlaceholders Foo Bar',
    })
        .option('exposesPlaceholders', {
        requiresArg: false,
        type: 'array',
        describe: 'The names of any placeholders that are exposed on this component (to place other components in). This will cause placeholder settings items to be generated for them.',
    });
}
exports.args = args;
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        // create micro-manifest to deploy from
        const fields = [];
        if (argv.fields && argv.fields.length > 0) {
            argv.fields.forEach((field) => {
                const splitField = field.split(':');
                const fieldType = splitField.length === 1 ? 'Single-Line Text' : splitField[1];
                fields.push({ name: splitField[0], type: fieldType });
            });
        }
        const definition = {
            name: argv.name,
            displayName: argv.displayName,
            icon: argv.icon,
            fields: fields.length === 0 ? null : fields,
            placeholders: argv.exposesPlaceholders,
            allowedPlaceholders: argv.allowedPlaceholders,
        };
        const manifestSource = `module.exports = {
  default: function(manifest) {
    manifest.addComponent(${JSON.stringify(definition, null, 2)});
  }
}`;
        if (argv.skipDeploy) {
            console.log(manifestSource);
        }
        else {
            yield micro_manifest_1.default(argv, manifestSource);
            console.log(`
${chalk_1.default.green('Your component has been created (or updated)!')}

${chalk_1.default.green('NEXT STEPS FOR NEW COMPONENTS')}

* Create a component in your JSS application called ${chalk_1.default.green(argv.name)} (${chalk_1.default.green(`jss scaffold ${argv.name}`)})
* Deploy your app with the new component to Sitecore (${chalk_1.default.green('jss deploy:watch')} or ${chalk_1.default.green('jss deploy files')})
* Add the new component to a route item using the Experience Editor
`);
        }
    });
}
