"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
/* eslint-disable prettier/prettier */
const sitecore_jss_dev_tools_1 = require("@sitecore-jss/sitecore-jss-dev-tools");
exports.command = 'setup';
exports.describe = 'Sets up the scjssconfig.json config file, which defines how this application connects to a Sitecore instance for content or deployment.';
exports.builder = {
    instancePath: {
        requiresArg: false,
        type: 'string',
        describe: 'Path to the Sitecore "Website" folder (e.g. c:\\dev\\sitecore\\Website)',
    },
    deployUrl: {
        requiresArg: false,
        type: 'string',
        describe: 'Sitecore host used to deploy the app (e.g. http://sitecore9/sitecore/api/jss/import)',
    },
    layoutServiceHost: {
        requiresArg: false,
        type: 'string',
        describe: 'Sitecore host used to download Layout Service data (e.g. http://sitecore9)',
    },
    apiKey: {
        requiresArg: false,
        type: 'string',
        describe: 'Sitecore API Key (GUID of item under /sitecore/system/Settings/Services/API Keys/ in master db, or core db for Sitecore 9.0)',
    },
    deploySecret: {
        requiresArg: false,
        type: 'string',
        describe: 'Deployment secret (32+ random chars)',
    },
    nonInteractive: {
        requiresArg: false,
        type: 'boolean',
        describe: 'Disallows interactive prompts (all other arguments must be passed in this mode)',
    },
    outputFile: {
        requiresArg: false,
        type: 'string',
        describe: 'The file path to output the config to. Defaults to the app\'s scjssconfig.json',
    },
    skipValidation: {
        requiresArg: false,
        type: 'boolean',
        describe: 'Skip validation of command arguments (e.g. for CI)',
    },
};
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        sitecore_jss_dev_tools_1.setup(!argv.nonInteractive, argv.outputFile, argv);
    });
}
exports.handler = handler;
