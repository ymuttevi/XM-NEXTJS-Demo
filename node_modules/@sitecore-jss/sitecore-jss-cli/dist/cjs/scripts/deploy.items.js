"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
/* eslint-disable prettier/prettier */
const sitecore_jss_dev_tools_1 = require("@sitecore-jss/sitecore-jss-dev-tools");
const resolve_package_1 = __importDefault(require("../resolve-package"));
const package_1 = require("./package");
exports.command = 'items';
exports.describe = 'Deploys the app\'s Sitecore items to Sitecore. No files are deployed. `jss deploy items --help` for options.';
exports.builder = Object.assign({ deployUrl: {
        requiresArg: false,
        type: 'string',
        describe: 'URL to the Sitecore JSS import service that accepts the package deployment. Defaults to the \'deployUrl\' in scjssconfig.json.',
    }, deploySecret: {
        requiresArg: false,
        type: 'string',
        alias: 's',
        describe: 'Shared secret to authenticate the deployment with Sitecore. Defaults to the \'deploySecret\' in scjssconfig.json.',
    }, debugSecurity: {
        requiresArgs: false,
        type: 'boolean',
        describe: 'Enables diagnosing authentication issues with your deployment. Exposes secrets to output, use only for temporary diagnostics.',
        default: false,
    }, skipPackage: {
        requiresArgs: false,
        type: 'boolean',
        describe: 'If true, skips build, manifest, and packaging steps. This can be used to consume existing output from jss package (via the packageOutputPath parameter) without rebuilding it.',
        default: false,
    }, config: {
        requiresArg: false,
        type: 'string',
        describe: 'Path to scjssconfig file.',
        default: './scjssconfig.json',
    }, proxy: {
        requiresArgs: false,
        type: 'string',
        describe: 'Specify a HTTP proxy to use when deploying items.',
    }, acceptCertificate: {
        requiresArgs: false,
        type: 'string',
        describe: 'Whitelists a specific SSL certificate thumbprint, regardless of normal SSL validation. Useful for self-signed certificates.',
    } }, package_1.builder);
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function handler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        sitecore_jss_dev_tools_1.verifySetup();
        const packageJson = yield resolve_package_1.default();
        if (!argv.appName) {
            argv.appName = packageJson.config.appName;
        }
        if (!argv.appName) {
            throw new Error('App Name was not defined as a parameter or in the package.json config');
        }
        const jssConfig = yield sitecore_jss_dev_tools_1.resolveScJssConfig({ configPath: argv.config });
        if (!argv.deployUrl) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const legacyConfig = jssConfig.sitecore;
            argv.deployUrl = legacyConfig.shipUrl ? legacyConfig.shipUrl : jssConfig.sitecore.deployUrl;
        }
        if (!argv.deployUrl) {
            throw new Error('deployUrl was not defined as a parameter or in the scjssconfig.json file');
        }
        if (/\/ship\/services\/package/.test(argv.deployUrl)) {
            throw new Error('deployUrl appears to be a Sitecore.Ship endpoint. JSS no longer uses Ship. You will need to reconfigure your endpoint to the JSS deploy service and provide an app shared secret to deploy.');
        }
        if (!argv.deploySecret) {
            argv.deploySecret = jssConfig.sitecore.deploySecret;
        }
        if (!argv.deploySecret) {
            throw new Error('deploySecret was not defined as a parameter or in the scjssconfig.json file');
        }
        let continuation = Promise.resolve();
        if (!argv.skipPackage) {
            continuation = package_1.handler(argv);
        }
        return continuation.then(() => {
            const deployArgs = {
                appName: argv.appName,
                packagePath: argv.packageOutputPath,
                importServiceUrl: argv.deployUrl,
                secret: argv.deploySecret,
                debugSecurity: argv.debugSecurity,
                proxy: argv.proxy,
                acceptCertificate: argv.acceptCertificate,
            };
            return sitecore_jss_dev_tools_1.packageDeploy(deployArgs).catch((error) => {
                if (error) {
                    console.log(error);
                }
                process.exit(1);
            });
        });
    });
}
exports.handler = handler;
