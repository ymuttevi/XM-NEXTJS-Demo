"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const dotenv = __importStar(require("dotenv"));
const dotenv_expand_1 = __importDefault(require("dotenv-expand"));
/**
 * @param {string} dir The directory containing the .env files to load.
 */
function processEnv(dir) {
    // replicate Next.js handling/behavior, but without a default NODE_ENV
    // https://github.com/vercel/next.js/blob/v10.0.5/packages/next-env/index.ts#L80-L90
    const mode = process.env.NODE_ENV;
    const dotenvFiles = [
        mode && `.env.${mode}.local`,
        // Don't include `.env.local` for `test` environment
        // since normally you expect tests to produce the same
        // results for everyone
        mode !== 'test' && '.env.local',
        mode && `.env.${mode}`,
        '.env',
    ].filter(Boolean);
    // inspired by https://github.com/entropitor/dotenv-cli/blob/v4.0.0/cli.js#L53-L55
    dotenvFiles.forEach(function (env) {
        dotenv_expand_1.default.expand(dotenv.config({ path: path_1.default.resolve(dir, env) }));
    });
}
exports.default = processEnv;
