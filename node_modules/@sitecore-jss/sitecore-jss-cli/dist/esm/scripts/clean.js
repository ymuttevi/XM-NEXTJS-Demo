var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable prettier/prettier */
import { clean } from '@sitecore-jss/sitecore-jss-dev-tools';
import resolvePackage from '../resolve-package';
export const command = 'clean';
export const describe = 'Cleans the contents of a directory, by default the buildArtifactsPath.';
export const builder = {
    path: {
        requiresArgs: false,
        type: 'string',
        describe: 'The path to clean. Defaults to buildArtifactsPath config in package.json',
    },
};
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function handler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = yield resolvePackage();
        if (!argv.path) {
            argv.path = packageJson.config.buildArtifactsPath;
        }
        if (!argv.path) {
            console.error('Path argument was not specified and no \'buildArtifactsPath\' in package.json.');
            process.exit(1);
        }
        if (argv.path.length === 0) {
            console.error('Clean was requested with a blank path argument. This would delete cwd; aborting.');
            process.exit(1);
        }
        clean({ path: argv.path });
    });
}
