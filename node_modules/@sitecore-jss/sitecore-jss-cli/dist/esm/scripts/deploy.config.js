var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable prettier/prettier */
import { deploy, verifySetup, resolveScJssConfig } from '@sitecore-jss/sitecore-jss-dev-tools';
import path from 'path';
import resolvePackage from '../resolve-package';
export const command = 'config';
export const describe = 'Deploys the app\'s Sitecore configuration file(s) to the Sitecore server. `jss deploy config --help` for options.';
export const builder = {
    source: {
        requiresArg: false,
        type: 'string',
        describe: 'The source path of the config patches to deploy.',
        default: './sitecore/config',
    },
    destination: {
        requiresArg: false,
        type: 'string',
        describe: 'Destination path to deploy to. Defaults to the \'instancePath\' set in scjssconfig.json, combined with the \'sitecoreConfigPath\' setting from package.json.',
    },
    config: {
        requiresArg: false,
        type: 'string',
        describe: 'Path to scjssconfig file.',
        default: './scjssconfig.json',
    },
};
/**
 * @param {any} argv
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function handler(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        verifySetup();
        const options = {
            destinationPath: argv.destination,
            sourcePath: argv.source,
            clean: false,
        };
        if (!options.destinationPath) {
            const packageJson = yield resolvePackage();
            const scJssConfig = yield resolveScJssConfig({ configPath: argv.config });
            options.destinationPath = path.join(scJssConfig.sitecore.instancePath, packageJson.config.sitecoreConfigPath);
        }
        deploy(options);
    });
}
