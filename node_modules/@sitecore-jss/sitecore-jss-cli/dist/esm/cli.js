var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import cli from './cli-shared';
import resolvePackage from './resolve-package';
import runPackageScript from './run-package-script';
import * as commands from './scripts';
/**
 * Get package script commands
 */
function getPackageScriptCommands() {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = yield resolvePackage();
        const result = {};
        if (!packageJson || !packageJson.scripts) {
            return result;
        }
        Object.keys(packageJson.scripts).forEach((script) => {
            if (script === 'jss') {
                return;
            }
            const command = {
                command: script,
                describe: 'package.json script',
                builder: {},
                disableStrictArgs: true,
                handler: (argv) => {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (argv._[0]) {
                        runPackageScript(process.argv.slice(2));
                    }
                },
            };
            result[script] = command;
        });
        return result;
    });
}
/**
 * implements CLI commands when executed from a local node_modules folder
 */
export default function () {
    return __awaiter(this, void 0, void 0, function* () {
        const packageScripts = yield getPackageScriptCommands();
        cli(Object.assign({}, commands, packageScripts));
    });
}
