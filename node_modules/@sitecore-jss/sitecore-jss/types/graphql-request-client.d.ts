import { DocumentNode } from 'graphql';
import { Debugger } from './debug';
/**
 * An interface for GraphQL clients for Sitecore APIs
 */
export interface GraphQLClient {
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {Object} variables graphql variables
     */
    request<T>(query: string | DocumentNode, variables?: {
        [key: string]: unknown;
    }): Promise<T>;
}
/**
 * Minimum configuration options for classes that implement @see GraphQLClient
 */
export declare type GraphQLRequestClientConfig = {
    /**
     * The API key to use for authentication. This will be added as an 'sc_apikey' header.
     */
    apiKey?: string;
    /**
     * Override debugger for logging. Uses 'sitecore-jss:http' by default.
     */
    debugger?: Debugger;
    /**
     * Override fetch method. Uses 'graphql-request' library default otherwise ('cross-fetch').
     */
    fetch?: typeof fetch;
    /**
     * GraphQLClient request timeout
     */
    timeout?: number;
};
/**
 * A GraphQL client for Sitecore APIs that uses the 'graphql-request' library.
 * https://github.com/prisma-labs/graphql-request
 */
export declare class GraphQLRequestClient implements GraphQLClient {
    private endpoint;
    private client;
    private headers;
    private debug;
    private abortTimeout?;
    private timeout?;
    /**
     * Provides ability to execute graphql query using given `endpoint`
     * @param {string} endpoint The Graphql endpoint
     * @param {GraphQLRequestClientConfig} [clientConfig] GraphQL request client configuration.
     */
    constructor(endpoint: string, clientConfig?: GraphQLRequestClientConfig);
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {Object} variables graphql variables
     */
    request<T>(query: string | DocumentNode, variables?: {
        [key: string]: unknown;
    }): Promise<T>;
}
