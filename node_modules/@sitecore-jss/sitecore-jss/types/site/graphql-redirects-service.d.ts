import { GraphQLClient } from '../graphql';
export declare const REDIRECT_TYPE_301 = "REDIRECT_301";
export declare const REDIRECT_TYPE_302 = "REDIRECT_302";
export declare const REDIRECT_TYPE_SERVER_TRANSFER = "SERVER_TRANSFER";
export declare type RedirectInfo = {
    pattern: string;
    target: string;
    redirectType: string;
    isQueryStringPreserved: boolean;
    locale: string;
};
export declare type GraphQLRedirectsServiceConfig = {
    /**
     * Your Graphql endpoint
     */
    endpoint: string;
    /**
     * The API key to use for authentication
     */
    apiKey: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * Override fetch method. Uses 'GraphQLRequestClient' default otherwise.
     */
    fetch?: typeof fetch;
};
/**
 * The schema of data returned in response to redirects array request
 */
export declare type RedirectsQueryResult = {
    site: {
        siteInfo: {
            redirects: RedirectInfo[];
        } | null;
    };
};
/**
 *  The GraphQLRedirectsService class is used to query the JSS redirects using Graphql endpoint
 */
export declare class GraphQLRedirectsService {
    private options;
    private graphQLClient;
    protected get query(): string;
    /**
     * Creates an instance of graphQL redirects service with the provided options
     * @param {GraphQLRedirectsServiceConfig} options instance
     */
    constructor(options: GraphQLRedirectsServiceConfig);
    /**
     * Fetch an array of redirects from API
     * @returns Promise<RedirectInfo[]>
     * @throws {Error} if the siteName is empty.
     */
    fetchRedirects(): Promise<RedirectInfo[]>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
