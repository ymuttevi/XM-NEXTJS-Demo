/**
 * Static utility class for Sitecore Experience Editor
 */
export declare class ExperienceEditor {
    /**
     * Determines whether the current execution context is within a Experience Editor.
     * Experience Editor environment can be identified only in the browser
     * @returns true if executing within a Experience Editor
     */
    static isActive(): boolean;
    static resetChromes(): void;
}
/**
 * Copy of chrome rediscovery contract from Horizon (chrome-rediscovery.contract.ts)
 */
export declare const ChromeRediscoveryGlobalFunctionName: {
    name: string;
};
/**
 * Static utility class for Sitecore Horizon Editor
 */
export declare class HorizonEditor {
    /**
     * Determines whether the current execution context is within a Horizon Editor.
     * Horizon Editor environment can be identified only in the browser
     * @returns true if executing within a Horizon Editor
     */
    static isActive(): boolean;
    static resetChromes(): void;
}
/**
 * Determines whether the current execution context is within a Sitecore editor.
 * Sitecore Editor environment can be identified only in the browser
 * @returns true if executing within a Sitecore editor
 */
export declare const isEditorActive: () => boolean;
/**
 * Resets Sitecore editor "chromes"
 */
export declare const resetEditorChromes: () => void;
/**
 * @description in Experience Editor, anchor tags
 * with both onclick and href attributes will use the href, blocking the onclick from firing.
 * This function makes it so the anchor tags function as intended in the sample when using Experience Editor
 *
 * The Mutation Observer API is used to observe changes to the body, then select all elements with href="#" and an onclick,
 * and replaces the # value with javascript:void(0); which prevents the anchor tag from blocking the onclick event handler.
 * @see Mutation Observer API: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver
 */
export declare const handleEditorAnchors: () => void;
