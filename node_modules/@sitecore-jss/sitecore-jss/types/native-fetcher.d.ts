import { HttpResponse } from './data-fetcher';
import { Debugger } from './debug';
declare type NativeDataFetcherOptions = {
    /**
     * Override debugger for logging. Uses 'sitecore-jss:http' by default.
     */
    debugger?: Debugger;
    /**
     * Override fetch method. Uses native (or polyfilled) fetch by default.
     */
    fetch?: typeof fetch;
    /**
     * Optional request timeout.
     */
    timeout?: number;
};
export declare type NativeDataFetcherConfig = NativeDataFetcherOptions & RequestInit;
export declare class NativeDataFetcher {
    protected config: NativeDataFetcherConfig;
    private abortTimeout?;
    constructor(config?: NativeDataFetcherConfig);
    /**
     * Implements a data fetcher. @see HttpDataFetcher<T> type for implementation details/notes.
     * @param {string} url The URL to request; may include query string
     * @param {unknown} [data] Optional data to POST with the request.
     * @returns {Promise<HttpResponse<T>>} response
     */
    fetch<T>(url: string, data?: unknown): Promise<HttpResponse<T>>;
    /**
     * Determines settings for the request
     * @param {RequestInit} init Custom settings for request
     * @param {unknown} [data] Optional data to POST with the request
     * @returns {RequestInit} The final request settings
     */
    protected getRequestInit(init?: RequestInit, data?: unknown): RequestInit;
    /**
     * Safely extract all headers for debug logging
     * @param {HeadersInit} incomingHeaders Incoming headers
     * @returns Object with headers as key/value pairs
     */
    protected extractDebugHeaders(incomingHeaders?: HeadersInit): {
        [key: string]: string | string[];
    };
}
export {};
