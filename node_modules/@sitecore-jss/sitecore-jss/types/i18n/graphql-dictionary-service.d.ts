import { GraphQLClient } from '../graphql-request-client';
import { DictionaryPhrases, DictionaryServiceBase } from './dictionary-service';
import { CacheOptions } from '../cache-client';
import { SearchServiceConfig } from '../graphql';
/** @private */
export declare const queryError = "Valid value for rootItemId not provided and failed to auto-resolve app root item.";
/**
 * Configuration options for @see GraphQLDictionaryService instances
 */
export interface GraphQLDictionaryServiceConfig extends SearchServiceConfig, CacheOptions {
    /**
     * The URL of the graphQL endpoint.
     */
    endpoint: string;
    /**
     * The API key to use for authentication.
     */
    apiKey: string;
    /**
     * Optional. The template ID to use when searching for dictionary entries.
     * @default '6d1cd89719364a3aa511289a94c2a7b1' (/sitecore/templates/System/Dictionary/Dictionary entry)
     */
    dictionaryEntryTemplateId?: string;
    /**
     * Optional. The template ID of a JSS App to use when searching for the appRootId.
     * @default '061cba1554744b918a0617903b102b82' (/sitecore/templates/Foundation/JavaScript Services/App)
     */
    jssAppTemplateId?: string;
}
/**
 * The schema of data returned in response to a dictionary query request.
 */
export declare type DictionaryQueryResult = {
    key: {
        value: string;
    };
    phrase: {
        value: string;
    };
};
/**
 * Service that fetch dictionary data using Sitecore's GraphQL API.
 * @augments DictionaryServiceBase
 * @mixes SearchQueryService<DictionaryQueryResult>
 */
export declare class GraphQLDictionaryService extends DictionaryServiceBase {
    options: GraphQLDictionaryServiceConfig;
    private graphQLClient;
    private searchService;
    /**
     * Creates an instance of graphQL dictionary service with the provided options
     * @param {GraphQLDictionaryService} options instance
     */
    constructor(options: GraphQLDictionaryServiceConfig);
    /**
     * Fetches dictionary data for internalization.
     * @param {string} language the language to fetch
     * @default query (@see query)
     * @returns {Promise<DictionaryPhrases>} dictionary phrases
     * @throws {Error} if the app root was not found for the specified site and language.
     */
    fetchDictionaryData(language: string): Promise<DictionaryPhrases>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
