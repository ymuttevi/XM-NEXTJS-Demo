/// <reference types="node" />
import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { IncomingMessage, ServerResponse } from 'http';
import { LayoutServiceBase } from './layout-service';
import { PlaceholderData, LayoutServiceData } from './models';
import { HttpDataFetcher } from '../data-fetcher';
interface FetchParams {
    [param: string]: string | number | boolean;
    sc_apikey: string;
    sc_site: string;
    sc_lang: string;
    tracking: boolean;
}
export declare type RestLayoutServiceConfig = {
    /**
     * Your Sitecore instance hostname that is the backend for JSS
     */
    apiHost: string;
    /**
     * The Sitecore SSC API key your app uses
     */
    apiKey: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * Enables/disables analytics tracking for the Layout Service invocation (default is true).
     * More than likely, this would be set to false for SSG/hybrid implementations, and the
     * JSS tracker would instead be used on the client-side: {@link https://jss.sitecore.com/docs/fundamentals/services/tracking}
     * @default true
     */
    tracking?: boolean;
    /**
     * Function that handles fetching API data
     */
    dataFetcherResolver?: DataFetcherResolver;
    /**
     * Layout Service "named" configuration
     */
    configurationName?: string;
};
/**
 * Data fetcher resolver in order to provide custom data fetcher
 * @param {IncomingMessage} [req] Request instance
 * @param {ServerResponse} [res] Response instance
 */
export declare type DataFetcherResolver = <T>(req?: IncomingMessage, res?: ServerResponse) => HttpDataFetcher<T>;
/**
 * Fetch layout data using the Sitecore Layout Service REST API.
 * Uses Axios as the default data fetcher (@see AxiosDataFetcher).
 * @augments LayoutServiceBase
 *
 */
export declare class RestLayoutService extends LayoutServiceBase {
    private serviceConfig;
    constructor(serviceConfig: RestLayoutServiceConfig);
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath item path to fetch layout data for.
     * @param {string} [language] the language to fetch layout data for.
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<LayoutServiceData>} layout service data
     * @throws {Error} the item with the specified path is not found
     */
    fetchLayoutData(itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<LayoutServiceData>;
    /**
     * Fetch layout data for a particular placeholder.
     * Makes a request to Sitecore Layout Service for the specified placeholder in
     * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.
     * @param {string} placeholderName the name of the placeholder to fetch layout data for.
     * @param {string} itemPath the path to the item to fetch layout data for.
     * @param {string} [language] the language to fetch data for.
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<PlaceholderData>} placeholder data
     */
    fetchPlaceholderData(placeholderName: string, itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<PlaceholderData>;
    /**
     * Provides fetch options in order to fetch data
     * @param {string} [language] language will be applied to `sc_lang` param
     * @returns {FetchOptions} fetch options
     */
    protected getFetchParams: (language?: string | undefined) => FetchParams;
    /**
     * Resolves layout service url
     * @param {string} apiType which layout service API to call ('render' or 'placeholder')
     * @returns the layout service url
     */
    protected resolveLayoutServiceUrl(apiType: 'render' | 'placeholder'): string;
    /**
     * Provides default @see AxiosDataFetcher data fetcher
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns default fetcher
     */
    protected getDefaultFetcher: <T>(req?: IncomingMessage | undefined, res?: ServerResponse | undefined) => (url: string, data?: unknown) => Promise<AxiosResponse<T>>;
    /**
     * Setup request headers
     * @param {IncomingMessage} req Request instance
     * @returns {AxiosRequestConfig} axios request config
     */
    protected setupReqHeaders(req: IncomingMessage): (reqConfig: AxiosRequestConfig) => AxiosRequestConfig;
    /**
     * Setup response headers based on response from layout service
     * @param {ServerResponse} res Response instance
     * @returns {AxiosResponse} response
     */
    protected setupResHeaders(res: ServerResponse): (serverRes: AxiosResponse) => AxiosResponse<any>;
}
export {};
