import { HttpDataFetcher } from '../data-fetcher';
export declare const DEFAULT_CHANNEL = "WEB";
/**
 * Object model of CDP execute experience result
 */
export declare type ExecuteExperienceResult = {
    /**
     * The identified variant
     */
    variantId?: string;
};
export declare type GenerateBrowserIdResult = {
    /**
     * The browser id
     */
    ref: string;
};
export declare type CdpServiceConfig = {
    /**
     * Your Sitecore CDP API endpoint
     */
    endpoint: string;
    /**
     * The client key to use for authentication
     */
    clientKey: string;
    /**
     * The Sitecore CDP channel to use for events. Uses 'WEB' by default.
     */
    channel?: string;
    /**
     * Custom data fetcher resolver. Uses @see AxiosDataFetcher by default.
     */
    dataFetcherResolver?: DataFetcherResolver;
    /**
     * Timeout (ms) for CDP request. Default is 250.
     */
    timeout?: number;
};
export declare type DataFetcherConfig = {
    timeout: number;
    headers?: Record<string, string>;
};
/**
 * Data fetcher resolver in order to provide custom data fetcher
 */
export declare type DataFetcherResolver = <T>(config: DataFetcherConfig) => HttpDataFetcher<T>;
/**
 * Object model of Experience Context data
 */
export declare type ExperienceParams = {
    referrer: string;
    utm: {
        [key: string]: string | null;
        campaign: string | null;
        source: string | null;
        medium: string | null;
        content: string | null;
    };
};
export declare class CdpService {
    protected config: CdpServiceConfig;
    /**
     * @param {CdpServiceConfig} [config] CDP service config
     */
    private timeout;
    constructor(config: CdpServiceConfig);
    /**
     * Executes targeted experience for a page and params to determine the variant to render.
     * @param {string} contentId the friendly content id of the page
     * @param {string} browserId the browser id
     * @param {string} userAgent the user agent
     * @param {string} pointOfSale current point of sale
     * @param {ExperienceParams} params the experience params for the user
     * @returns {ExecuteExperienceResult} the execute experience result
     */
    executeExperience(contentId: string, browserId: string, userAgent: string, pointOfSale: string, params: ExperienceParams): Promise<string | undefined>;
    /**
     * Generates a new browser id
     * @returns {string} browser id
     */
    generateBrowserId(): Promise<string | undefined>;
    /**
     * Get formatted URL for generateBrowserId call
     * @returns {string} formatted URL
     */
    protected getGenerateBrowserIdUrl(): string;
    /**
     * Get formatted URL for executeExperience call
     * @returns {string} formatted URL
     */
    protected getExecuteExperienceUrl(): string;
    /**
     * Returns provided data fetcher otherwise default one
     * @param {Record<string, string>} [headers] Optional headers
     * @returns {HttpDataFetcher} data fetcher
     */
    protected getFetcher<Response>(headers?: Record<string, string>): HttpDataFetcher<Response>;
    /**
     * Provides default @see AxiosDataFetcher data fetcher
     * @param {DataFetcherConfig} config
     * @returns default fetcher
     */
    protected getDefaultFetcher: <T>(config: DataFetcherConfig) => (url: string, data?: unknown) => Promise<import("axios").AxiosResponse<T>>;
}
