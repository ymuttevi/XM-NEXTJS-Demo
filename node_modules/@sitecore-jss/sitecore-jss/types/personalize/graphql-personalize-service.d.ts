import { GraphQLClient } from '../graphql-request-client';
export declare type GraphQLPersonalizeServiceConfig = {
    /**
     * Your Graphql endpoint
     */
    endpoint: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * The API key to use for authentication
     */
    apiKey: string;
    /**
     * Timeout (ms) for the Personalize request. Default is 250.
     */
    timeout?: number;
    /**
     * Override fetch method. Uses 'GraphQLRequestClient' default otherwise.
     */
    fetch?: typeof fetch;
};
/**
 * Object model of personlize info
 */
export declare type PersonalizeInfo = {
    /**
     * The (CDP-friendly) content id
     */
    contentId: string;
    /**
     * The configured variant ids
     */
    variantIds: string[];
};
export declare class GraphQLPersonalizeService {
    protected config: GraphQLPersonalizeServiceConfig;
    private graphQLClient;
    protected get query(): string;
    /**
     * Fetch personalize data using the Sitecore GraphQL endpoint.
     * @param {GraphQLPersonalizeServiceConfig} config
     */
    constructor(config: GraphQLPersonalizeServiceConfig);
    /**
     * Get personalize information for a route
     * @param {string} itemPath page route
     * @param {string} language language
     * @returns {Promise<PersonalizeInfo | undefined>} the personalize information or undefined (if itemPath / language not found)
     */
    getPersonalizeInfo(itemPath: string, language: string): Promise<PersonalizeInfo | undefined>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
