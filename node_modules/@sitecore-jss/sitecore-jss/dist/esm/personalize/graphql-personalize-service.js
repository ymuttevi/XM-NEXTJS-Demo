var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { GraphQLRequestClient } from '../graphql-request-client';
import debug from '../debug';
import { isTimeoutError } from '../utils';
import { CdpHelper } from './utils';
export class GraphQLPersonalizeService {
    /**
     * Fetch personalize data using the Sitecore GraphQL endpoint.
     * @param {GraphQLPersonalizeServiceConfig} config
     */
    constructor(config) {
        this.config = config;
        this.config.timeout = config.timeout || 250;
        this.graphQLClient = this.getGraphQLClient();
    }
    get query() {
        return /* GraphQL */ `
      query($siteName: String!, $language: String!, $itemPath: String!) {
        layout(site: $siteName, routePath: $itemPath, language: $language) {
          item {
            id
            version
            personalization {
              variantIds
            }
          }
        }
      }
    `;
    }
    /**
     * Get personalize information for a route
     * @param {string} itemPath page route
     * @param {string} language language
     * @returns {Promise<PersonalizeInfo | undefined>} the personalize information or undefined (if itemPath / language not found)
     */
    getPersonalizeInfo(itemPath, language) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            debug.personalize('fetching personalize info for %s %s %s', this.config.siteName, itemPath, language);
            try {
                const data = yield this.graphQLClient.request(this.query, {
                    siteName: this.config.siteName,
                    itemPath,
                    language,
                });
                return ((_a = data === null || data === void 0 ? void 0 : data.layout) === null || _a === void 0 ? void 0 : _a.item)
                    ? {
                        // CDP expects content id format `embedded_<id>_<lang>` (lowercase)
                        contentId: CdpHelper.getContentId(data.layout.item.id, language),
                        variantIds: data.layout.item.personalization.variantIds,
                    }
                    : undefined;
            }
            catch (error) {
                if (isTimeoutError(error)) {
                    return undefined;
                }
                throw error;
            }
        });
    }
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    getGraphQLClient() {
        return new GraphQLRequestClient(this.config.endpoint, {
            apiKey: this.config.apiKey,
            debugger: debug.personalize,
            fetch: this.config.fetch,
            timeout: this.config.timeout,
        });
    }
}
