var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { LayoutServiceBase } from './layout-service';
import { GraphQLRequestClient } from '../graphql-request-client';
import debug from '../debug';
/**
 * Service that fetch layout data using Sitecore's GraphQL API.
 * @augments LayoutServiceBase
 * @mixes GraphQLRequestClient
 */
export class GraphQLLayoutService extends LayoutServiceBase {
    /**
     * Fetch layout data using the Sitecore GraphQL endpoint.
     * @param {GraphQLLayoutServiceConfig} serviceConfig configuration
     */
    constructor(serviceConfig) {
        super();
        this.serviceConfig = serviceConfig;
        this.graphQLClient = this.getGraphQLClient();
    }
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath item path to fetch layout data for.
     * @param {string} [language] the language to fetch layout data for.
     * @returns {Promise<LayoutServiceData>} layout service data
     */
    fetchLayoutData(itemPath, language) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const query = this.getLayoutQuery(itemPath, language);
            debug.layout('fetching layout data for %s %s %s', itemPath, language, this.serviceConfig.siteName);
            const data = yield this.graphQLClient.request(query);
            // If `rendered` is empty -> not found
            return (((_a = data === null || data === void 0 ? void 0 : data.layout) === null || _a === void 0 ? void 0 : _a.item.rendered) || {
                sitecore: { context: { pageEditing: false, language }, route: null },
            });
        });
    }
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    getGraphQLClient() {
        return new GraphQLRequestClient(this.serviceConfig.endpoint, {
            apiKey: this.serviceConfig.apiKey,
            debugger: debug.layout,
        });
    }
    /**
     * Returns GraphQL Layout query
     * @param {string} itemPath page route
     * @param {string} [language] language
     * @returns {string} GraphQL query
     */
    getLayoutQuery(itemPath, language) {
        const languageVariable = language ? `, language:"${language}"` : '';
        const layoutQuery = this.serviceConfig.formatLayoutQuery
            ? this.serviceConfig.formatLayoutQuery(this.serviceConfig.siteName, itemPath, language)
            : `layout(site:"${this.serviceConfig.siteName}", routePath:"${itemPath}"${languageVariable})`;
        return `query {
      ${layoutQuery}{
        item {
          rendered
        }
      }
    }`;
    }
}
