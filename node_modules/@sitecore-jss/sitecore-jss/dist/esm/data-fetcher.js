import { resolveUrl } from './utils/utils';
export class ResponseError extends Error {
    constructor(message, response) {
        super(message);
        Object.setPrototypeOf(this, ResponseError.prototype);
        this.response = response;
    }
}
/**
 * @param {HttpResponse<T>} response the response to check
 * @throws {ResponseError} if response code is not ok
 */
export function checkStatus(response) {
    if (response.status >= 200 && response.status < 300) {
        return response;
    }
    const error = new ResponseError(response.statusText, response);
    throw error;
}
/**
 * @param {string} url the URL to request; may include query string
 * @param {HttpDataFetcher} fetcher the fetcher to use to perform the request
 * @param {ParsedUrlQueryInput} params the query string parameters to send with the request
 */
export function fetchData(url, fetcher, params = {}) {
    return fetcher(resolveUrl(url, params))
        .then(checkStatus)
        .then((response) => {
        // axios auto-parses JSON responses, don't need to JSON.parse
        return response.data;
    });
}
