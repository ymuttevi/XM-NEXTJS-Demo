"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdpHelper = exports.normalizePersonalizedRewrite = exports.getPersonalizedRewriteData = exports.getPersonalizedRewrite = exports.VARIANT_PREFIX = exports.DEFAULT_VARIANT = void 0;
exports.DEFAULT_VARIANT = '_default';
exports.VARIANT_PREFIX = '_variantId_';
/**
 * Get a personalized rewrite path for given pathname
 * @param {string} pathname the pathname
 * @param {PersonalizedRewriteData} data the personalize data to include in the rewrite
 * @returns {string} the rewrite path
 */
function getPersonalizedRewrite(pathname, data) {
    const path = pathname.startsWith('/') ? pathname : '/' + pathname;
    return `/${exports.VARIANT_PREFIX}${data.variantId}${path}`;
}
exports.getPersonalizedRewrite = getPersonalizedRewrite;
/**
 * Get personalize data from the rewrite path
 * @param {string} pathname the pathname
 * @returns {PersonalizedRewriteData} the personalize data from the rewrite
 */
function getPersonalizedRewriteData(pathname) {
    const data = {
        variantId: exports.DEFAULT_VARIANT,
    };
    const path = pathname.endsWith('/') ? pathname : pathname + '/';
    const result = path.match(`${exports.VARIANT_PREFIX}(.*?)\\/`);
    if (result) {
        data.variantId = result[1];
    }
    return data;
}
exports.getPersonalizedRewriteData = getPersonalizedRewriteData;
/**
 * Normalize a personalized rewrite path (remove personalize data)
 * @param {string} pathname the pathname
 * @returns {string} the pathname with personalize data removed
 */
function normalizePersonalizedRewrite(pathname) {
    if (!pathname.includes(exports.VARIANT_PREFIX)) {
        return pathname;
    }
    const result = pathname.match(`${exports.VARIANT_PREFIX}.*?(?:\\/|$)`);
    return result === null ? pathname : pathname.replace(result[0], '');
}
exports.normalizePersonalizedRewrite = normalizePersonalizedRewrite;
/**
 * Static utility class for Sitecore CDP
 */
class CdpHelper {
    /**
     * Gets the page variant id for CDP in the required format
     * @param {string} pageId the page id
     * @param {string} language the language
     * @param {string} variantId the variant id
     * @returns {string} the formatted page variant id
     */
    static getPageVariantId(pageId, language, variantId) {
        const formattedPageId = pageId.replace(/[{}-]/g, '');
        const formattedLanguage = language.replace('-', '_');
        let formattedVariantId = variantId;
        if (!variantId || variantId === exports.DEFAULT_VARIANT) {
            formattedVariantId = 'default';
        }
        return `${formattedPageId}_${formattedLanguage}_${formattedVariantId}`.toLowerCase();
    }
    /**
     * Gets the content id for CDP in the required format `embedded_<id>_<lang>`
     * @param {string} pageId the page id
     * @param {string} language the language
     * @returns {string} the content id
     */
    static getContentId(pageId, language) {
        const formattedPageId = pageId.replace(/[{}-]/g, '');
        const formattedLanguage = language.replace('-', '_');
        return `embedded_${formattedPageId}_${formattedLanguage}`.toLowerCase();
    }
}
exports.CdpHelper = CdpHelper;
