"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLRedirectsService = exports.REDIRECT_TYPE_SERVER_TRANSFER = exports.REDIRECT_TYPE_302 = exports.REDIRECT_TYPE_301 = void 0;
const graphql_1 = require("../graphql");
const constants_1 = require("../constants");
const debug_1 = __importDefault(require("../debug"));
exports.REDIRECT_TYPE_301 = 'REDIRECT_301';
exports.REDIRECT_TYPE_302 = 'REDIRECT_302';
exports.REDIRECT_TYPE_SERVER_TRANSFER = 'SERVER_TRANSFER';
// The default query for request redirects of site
const defaultQuery = /* GraphQL */ `
  query RedirectsQuery($siteName: String!) {
    site {
      siteInfo(site: $siteName) {
        redirects {
          pattern
          target
          redirectType
          isQueryStringPreserved
          locale
        }
      }
    }
  }
`;
/**
 *  The GraphQLRedirectsService class is used to query the JSS redirects using Graphql endpoint
 */
class GraphQLRedirectsService {
    /**
     * Creates an instance of graphQL redirects service with the provided options
     * @param {GraphQLRedirectsServiceConfig} options instance
     */
    constructor(options) {
        this.options = options;
        this.graphQLClient = this.getGraphQLClient();
    }
    get query() {
        return defaultQuery;
    }
    /**
     * Fetch an array of redirects from API
     * @returns Promise<RedirectInfo[]>
     * @throws {Error} if the siteName is empty.
     */
    fetchRedirects() {
        return __awaiter(this, void 0, void 0, function* () {
            const siteName = this.options.siteName;
            if (!siteName) {
                throw new Error(constants_1.siteNameError);
            }
            const redirectsResult = this.graphQLClient.request(this.query, {
                siteName,
            });
            return redirectsResult
                .then((result) => { var _a, _b; return ((_b = (_a = result === null || result === void 0 ? void 0 : result.site) === null || _a === void 0 ? void 0 : _a.siteInfo) === null || _b === void 0 ? void 0 : _b.redirects) || []; })
                .catch((e) => Promise.reject(e));
        });
    }
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    getGraphQLClient() {
        return new graphql_1.GraphQLRequestClient(this.options.endpoint, {
            apiKey: this.options.apiKey,
            debugger: debug_1.default.redirects,
            fetch: this.options.fetch,
        });
    }
}
exports.GraphQLRedirectsService = GraphQLRedirectsService;
