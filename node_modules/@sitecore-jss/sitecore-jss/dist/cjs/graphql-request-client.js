"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLRequestClient = void 0;
const graphql_request_1 = require("graphql-request");
const url_parse_1 = __importDefault(require("url-parse"));
const debug_1 = __importDefault(require("./debug"));
const timeout_promise_1 = __importDefault(require("./utils/timeout-promise"));
/**
 * A GraphQL client for Sitecore APIs that uses the 'graphql-request' library.
 * https://github.com/prisma-labs/graphql-request
 */
class GraphQLRequestClient {
    /**
     * Provides ability to execute graphql query using given `endpoint`
     * @param {string} endpoint The Graphql endpoint
     * @param {GraphQLRequestClientConfig} [clientConfig] GraphQL request client configuration.
     */
    constructor(endpoint, clientConfig = {}) {
        this.endpoint = endpoint;
        this.headers = {};
        if (clientConfig.apiKey) {
            this.headers.sc_apikey = clientConfig.apiKey;
        }
        if (!endpoint || !url_parse_1.default(endpoint).hostname) {
            throw new Error(`Invalid GraphQL endpoint '${endpoint}'. Verify that 'layoutServiceHost' property in 'scjssconfig.json' file or appropriate environment variable is set`);
        }
        this.timeout = clientConfig.timeout;
        this.client = new graphql_request_1.GraphQLClient(endpoint, {
            headers: this.headers,
            fetch: clientConfig.fetch,
        });
        this.debug = clientConfig.debugger || debug_1.default.http;
    }
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {Object} variables graphql variables
     */
    request(query, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                // Note we don't have access to raw request/response with graphql-request
                // (or nice hooks like we have with Axios), but we should log whatever we have.
                this.debug('request: %o', {
                    url: this.endpoint,
                    headers: this.headers,
                    query,
                    variables,
                });
                const fetchWithOptionalTimeout = [this.client.request(query, variables)];
                if (this.timeout) {
                    this.abortTimeout = new timeout_promise_1.default(this.timeout);
                    fetchWithOptionalTimeout.push(this.abortTimeout.start);
                }
                Promise.race(fetchWithOptionalTimeout).then((data) => {
                    var _a;
                    (_a = this.abortTimeout) === null || _a === void 0 ? void 0 : _a.clear();
                    this.debug('response: %o', data);
                    resolve(data);
                }, (error) => {
                    var _a;
                    (_a = this.abortTimeout) === null || _a === void 0 ? void 0 : _a.clear();
                    this.debug('response error: %o', error.response || error.message || error);
                    reject(error);
                });
            });
        });
    }
}
exports.GraphQLRequestClient = GraphQLRequestClient;
