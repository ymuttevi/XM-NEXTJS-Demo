"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTimeoutError = exports.isAbsoluteUrl = exports.resolveUrl = void 0;
const is_server_1 = __importDefault(require("./is-server"));
/**
 * note: encodeURIComponent is available via browser (window) or natively in node.js
 * if you use another js engine for server-side rendering you may not have native encodeURIComponent
 * and would then need to install a package for that functionality
 * @param {ParsedUrlQueryInput} params query string parameters
 * @returns {string} query string
 */
function getQueryString(params) {
    return Object.keys(params)
        .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(String(params[k]))}`)
        .join('&');
}
/**
 * Resolves a base URL that may contain query string parameters and an additional set of query
 * string parameters into a unified string representation.
 * @param {string} urlBase the base URL that may contain query string parameters
 * @param {ParsedUrlQueryInput} params query string parameters
 * @returns a URL string
 * @throws {RangeError} if the provided url is an empty string
 */
function resolveUrl(urlBase, params = {}) {
    if (!urlBase) {
        throw new RangeError('url must be a non-empty string');
    }
    // This is a better way to work with URLs since it handles different user input
    // edge cases. This works in Node and all browser except IE11.
    // https://developer.mozilla.org/en-US/docs/Web/API/URL
    // TODO: Verify our browser support requirements.
    if (is_server_1.default()) {
        const url = new URL(urlBase);
        for (const key in params) {
            if ({}.hasOwnProperty.call(params, key)) {
                url.searchParams.append(key, String(params[key]));
            }
        }
        const result = url.toString();
        return result;
    }
    const qs = getQueryString(params);
    const result = urlBase.indexOf('?') !== -1 ? `${urlBase}&${qs}` : `${urlBase}?${qs}`;
    return result;
}
exports.resolveUrl = resolveUrl;
const isAbsoluteUrl = (url) => {
    if (!url) {
        return false;
    }
    if (typeof url !== 'string') {
        throw new TypeError('Expected a string');
    }
    return /^[a-z][a-z0-9+.-]*:/.test(url);
};
exports.isAbsoluteUrl = isAbsoluteUrl;
/**
 * Indicates whether the error is a timeout error
 * @param {unknown} error error
 * @returns {boolean} is timeout error
 */
const isTimeoutError = (error) => {
    var _a;
    return (error.code === '408' ||
        error.code === 'ECONNABORTED' ||
        error.code === 'ETIMEDOUT' ||
        ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 408 ||
        error.name === 'AbortError');
};
exports.isTimeoutError = isTimeoutError;
