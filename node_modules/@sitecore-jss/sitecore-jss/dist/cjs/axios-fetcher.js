"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosDataFetcher = void 0;
const axios_1 = __importDefault(require("axios"));
const debug_1 = __importDefault(require("./debug"));
/**
 * Determines whether error is AxiosError
 * @param {unknown} error
 */
const isAxiosError = (error) => {
    return error.isAxiosError !== undefined;
};
/**
 *  AxisoDataFetcher is a wrapper for axios library.
 */
class AxiosDataFetcher {
    /**
     * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.
     * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to
     * be included in CORS requests (which is necessary for analytics and such).
     */
    constructor(dataFetcherConfig = {}) {
        const { onReq, onRes, onReqError, onResError, debugger: debuggerOverride } = dataFetcherConfig, axiosConfig = __rest(dataFetcherConfig, ["onReq", "onRes", "onReqError", "onResError", "debugger"]);
        if (axiosConfig.withCredentials === undefined) {
            axiosConfig.withCredentials = true;
        }
        this.instance = axios_1.default.create(axiosConfig);
        const debug = debuggerOverride || debug_1.default.http;
        // Note Axios response interceptors are applied in registered order;
        // however, request interceptors are REVERSED (https://github.com/axios/axios/issues/1663).
        // Hence, we're adding our request debug logging first (since we want that performed after any onReq)
        // and our response debug logging second (since we want that performed after any onRes).
        if (debug.enabled) {
            this.instance.interceptors.request.use((config) => {
                debug('request: %o', config);
                return config;
            }, (error) => {
                debug('request error: %o', isAxiosError(error) ? error.toJSON() : error);
                return Promise.reject(error);
            });
        }
        if (onReq) {
            this.instance.interceptors.request.use(onReq, onReqError);
        }
        if (onRes) {
            this.instance.interceptors.response.use(onRes, onResError);
        }
        if (debug.enabled) {
            this.instance.interceptors.response.use((response) => {
                // Note we're removing redundant properties (already part of request log above) to trim down log entry
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { request, config } = response, rest = __rest(response, ["request", "config"]);
                debug('response: %o', rest);
                return response;
            }, (error) => {
                debug('response error: %o', isAxiosError(error) ? error.toJSON() : error);
                return Promise.reject(error);
            });
        }
    }
    /**
     * Implements a data fetcher. @see HttpDataFetcher<T> type for implementation details/notes.
     * @param {string} url The URL to request; may include query string
     * @param {unknown} [data] Optional data to POST with the request.
     * @returns {Promise<AxiosResponse<T>>} response
     */
    fetch(url, data) {
        return this.instance.request({
            url,
            method: data ? 'POST' : 'GET',
            data,
        });
    }
    /**
     * Perform a GET request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse<T>>} response
     */
    get(url, config) {
        return this.instance.get(url, config);
    }
    /**
     * Perform a HEAD request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    head(url, config) {
        return this.instance.head(url, config);
    }
    /**
     * Perform a POST request
     * @param {string} url The URL to request; may include query string
     * @param {unknown} [data] Data to POST with the request.
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    post(url, data, config) {
        return this.instance.post(url, data, config);
    }
    /**
     * Perform a PUT request
     * @param {string} url The URL to request; may include query string
     * @param {unknown} [data] Data to PUT with the request.
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    put(url, data, config) {
        return this.instance.put(url, data, config);
    }
    /**
     * Perform a DELETE request
     * @param {string} url The URL to request; may include query string
     * @param {AxiosRequestConfig} [config] Axios config
     * @returns {Promise<AxiosResponse>} response
     */
    delete(url, config) {
        return this.instance.delete(url, config);
    }
}
exports.AxiosDataFetcher = AxiosDataFetcher;
